{"version":3,"sources":["components/Session.js","audio/beep.ogg","App.js","index.js"],"names":["Session","state","handleClick","arr","disabled","sessions","map","obj","idLabel","name","idDecrement","idIncrement","idLength","className","id","onClick","value","counter","initialArr","totalSeconds","countStart","App","useState","setArr","defaultIndex","setDefaultIndex","setDisabled","audioRef","useRef","firstCycle","countDown","prevstate","newArr","handleStart","e","setInterval","clearInterval","useEffect","otherIndex","otherTotalSeconds","setTimeout","current","play","minutes","Math","floor","minutesFormat","seconds","secondsFormat","warning","color","marginBottom","letterSpacing","ref","preload","src","beep","target","index","findIndex","parseInt","style","resetArr","session","pause","currentTime","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72681cc6.chunk.js","sourcesContent":["import { FiArrowDownCircle, FiArrowUpCircle } from 'react-icons/fi';\r\n\r\nfunction Session({ state, handleClick }) {\r\n  const { arr, disabled } = state;\r\n\r\n  const sessions = arr.map((obj) => {\r\n    // Set the attributes for the buttons depending on whether it is 'Session' or 'Break'\r\n    const idLabel = obj.name === 'Break' ? 'break-label' : 'session-label';\r\n    const idDecrement =\r\n      obj.name === 'Break' ? 'break-decrement' : 'session-decrement';\r\n    const idIncrement =\r\n      obj.name === 'Break' ? 'break-increment' : 'session-increment';\r\n    const idLength = obj.name === 'Break' ? 'break-length' : 'session-length';\r\n\r\n    return (\r\n      <div className=\"singleSession\" key={obj.name}>\r\n        <h1 id={idLabel}>{obj.name} Time</h1>\r\n        <span className=\"counter\">\r\n          {/* Button for increasing counter */}\r\n          <button\r\n            id={idIncrement}\r\n            name={obj.name}\r\n            onClick={handleClick}\r\n            value={1}\r\n            disabled={disabled}\r\n          >\r\n            <FiArrowUpCircle />\r\n          </button>\r\n\r\n          {/* Length of counter in minutes */}\r\n          <h2 id={idLength}>{obj.counter} min</h2>\r\n\r\n          {/* Button for decreasing counter */}\r\n          <button\r\n            id={idDecrement}\r\n            name={obj.name}\r\n            onClick={handleClick}\r\n            value={-1}\r\n            disabled={disabled}\r\n          >\r\n            <FiArrowDownCircle />\r\n          </button>\r\n        </span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"Session\">{sessions}</div>;\r\n}\r\n\r\nexport default Session;\r\n","export default __webpack_public_path__ + \"static/media/beep.1a0a5860.ogg\";","import { useRef, useEffect, useState } from 'react';\nimport Session from './components/Session';\n\n// Media\nimport beep from './audio/beep.ogg';\n// Icons\nimport {\n  AiFillGithub,\n  AiOutlinePauseCircle,\n  AiOutlinePlayCircle,\n  AiOutlineUndo,\n} from 'react-icons/ai';\n\n// Counter represents the minutes.\n// 'totalSeconds' is the converted value of 'counter' to seconds.\nconst initialArr = [\n  { name: 'Session', counter: 25, totalSeconds: 1500, countStart: null },\n  { name: 'Break', counter: 5, totalSeconds: 300, countStart: null },\n];\n\nconst App = () => {\n  // Timer will begin with the 'Session', so defaultIndex will be 0 to start with initialArr[0] or arr[0].\n  // As a reminder, 0 represents 'Session' while 1 represents 'Break'.\n  const [arr, setArr] = useState(initialArr);\n  const [defaultIndex, setDefaultIndex] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n\n  const audioRef = useRef();\n\n  // Prevents 'useEffect' from line 147 from running on first render.\n  const firstCycle = useRef(true);\n\n  // Reset clock timers.\n  const handleReset = () => {\n    clearInterval(arr[defaultIndex].countStart);\n\n    let resetArr = arr.map((session) => ({\n      ...session,\n      totalSeconds: session.counter * 60,\n      countStart: null,\n    }));\n    setArr(resetArr);\n    setDefaultIndex(0);\n    setDisabled(false);\n\n    audioRef.current.pause();\n    audioRef.current.currentTime = 0;\n  };\n\n  // Increase/decrease the session/break time counter.\n  const handleClick = (e) => {\n    const { value, name } = e.target;\n    let newArr = [...arr];\n    const index = newArr.findIndex((obj) => obj.name === name);\n    const { counter } = newArr[index];\n\n    // Check if the time counter is already at max(60) or min(0) limit value.\n    const limitCheck =\n      (counter === 1 && parseInt(value) === -1) ||\n      (counter === 60 && parseInt(value) === 1);\n\n    // If the time counter is at the limit, prevent icreasing/decreasing time counter.\n    // Else, continue increasing/decrease time coutner by 1.\n    if (!limitCheck) {\n      newArr[index] = {\n        ...newArr[index],\n        counter: counter + parseInt(value),\n        totalSeconds: 60 * (counter + parseInt(value)),\n      };\n\n      setArr(newArr);\n    }\n  };\n\n  // This will run every 1 second while the timer is active.\n  // It will decrease the current session's 'totalSeconds' by 1 second.\n  const countDown = () => {\n    setArr((prevstate) => {\n      let newArr = [...prevstate];\n      const { totalSeconds } = newArr[defaultIndex];\n      newArr[defaultIndex] = {\n        ...newArr[defaultIndex],\n        totalSeconds: totalSeconds - 1,\n      };\n\n      return newArr;\n    });\n  };\n\n  // Start or pause the timer.\n  const handleStart = (e) => {\n    const { totalSeconds, countStart } = arr[defaultIndex];\n    let newArr = [...arr];\n\n    // Check if the counter hasn't started yet.\n    // If it hasn't, start the timer.\n    // setInterval will return a value which will be used to pause the timer. It will run the 'countDown' function above.\n    if (totalSeconds > 0 && countStart === null) {\n      newArr[defaultIndex] = {\n        ...newArr[defaultIndex],\n        countStart: setInterval(countDown, 1000),\n      };\n      setArr(newArr);\n      setDisabled(true);\n    }\n\n    // If the counter is already running, pause it.\n    else {\n      clearInterval(countStart);\n      newArr[defaultIndex] = {\n        ...newArr[defaultIndex],\n        countStart: null,\n      };\n      setArr(newArr);\n      setDisabled(false);\n    }\n  };\n\n  // Check whether the timer already reached 0.\n  // This check will happen everytime 'totalSeconds' change.\n  useEffect(() => {\n    const { totalSeconds, countStart } = arr[defaultIndex];\n    let newArr = [...arr];\n\n    // If the timer reached 0, stop the timer and reset 'countStart' to its default value which is null.\n    if (totalSeconds === 0 && countStart !== null) {\n      clearInterval(countStart);\n      newArr[defaultIndex] = {\n        ...newArr[defaultIndex],\n        countStart: null,\n      };\n\n      // Default index will switch to either 0 or 1 depending on its current value.\n      // As a reminder, 0 represents 'Session' while 1 represents 'Break'.\n      let otherIndex = defaultIndex === 0 ? 1 : 0;\n\n      // Check the next timer's 'totalSeconds' if it is already at 0 or not.\n      // If it is, reset it to its default value so the program could start counting down again.\n      // If its not, don't change anything.\n      let otherTotalSeconds =\n        newArr[otherIndex].totalSeconds > 0\n          ? newArr[otherIndex].totalSeconds\n          : 60 * newArr[otherIndex].counter;\n\n      newArr[otherIndex] = {\n        ...newArr[otherIndex],\n        totalSeconds: otherTotalSeconds,\n      };\n\n      // Set all the changes to state 1 second later after the 'totalSeconds' reached 0.\n      setTimeout(() => {\n        setArr(newArr);\n        setDefaultIndex(otherIndex);\n        firstCycle.current = false;\n        audioRef.current.play();\n      }, 1000);\n    }\n  }, [arr[defaultIndex].totalSeconds]);\n\n  // A change in the 'defaultIndex' signifies the start of the next counter (to 'Session' or 'Break' depending on the last one).\n  useEffect(() => {\n    if (!firstCycle.current) {\n      handleStart();\n    }\n  }, [defaultIndex]);\n\n  // Changing the 'totalSeconds' to 'mm:ss' time format.\n  let minutes = Math.floor(arr[defaultIndex].totalSeconds / 60);\n  let minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\n  let seconds = arr[defaultIndex].totalSeconds % 60;\n  let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\n\n  // fontColor for the timer will change to red when its less than 60.\n  let warning =\n    minutes === 0\n      ? { color: '#f44336', marginBottom: '10px', letterSpacing: '7px' }\n      : { marginBottom: '10px', letterSpacing: '7px' };\n\n  return (\n    <div className=\"App\">\n      {/* Hidden audio input for when the tiemr reached 0. */}\n      <audio id=\"beep\" ref={audioRef} preload=\"auto\" src={beep}></audio>\n\n      <h1>Pomodoro Clock</h1>\n      <div className=\"display\">\n        {/* Controls for 'Session' and 'Break' */}\n        <Session\n          state={{ arr, defaultIndex, disabled }}\n          handleClick={handleClick}\n        />\n\n        {/* Display for the current session (either 'Session' or 'Break') */}\n        <div className=\"currentSession\">\n          <h1 id=\"timer-label\">{arr[defaultIndex].name} Time</h1>\n          <h2 id=\"time-left\" style={warning}>\n            {minutesFormat}:{secondsFormat}\n          </h2>\n          <div className=\"main-control\">\n            <button id=\"start_stop\" onClick={handleStart}>\n              {arr[defaultIndex].countStart ? (\n                <>\n                  <AiOutlinePauseCircle /> <p>Pause</p>\n                </>\n              ) : (\n                <>\n                  <AiOutlinePlayCircle /> <p>Start</p>\n                </>\n              )}\n            </button>\n            <button id=\"reset\" onClick={handleReset}>\n              <AiOutlineUndo /> Reset\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Profile Link */}\n      <div className=\"credits\">\n        <p>Designed and Coded By</p>\n        <a\n          href=\"https://github.com/pomubry\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <AiFillGithub />\n          Bryan Taduran\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}