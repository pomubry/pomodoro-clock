{"version":3,"sources":["components/Session.js","App.js","serviceWorker.js","index.js","githubIcon.svg"],"names":["Session","state","handleClick","arr","disabled","sessions","map","obj","idLabel","name","idDecrement","idIncrement","idLength","className","key","id","onClick","value","class","counter","App","totalSeconds","countStart","defaultIndex","audioRef","React","createRef","handleReset","e","clearInterval","setState","current","load","target","newArr","index","findIndex","parseInt","handleStart","setInterval","countDown","this","otherIndex","otherTotalSeconds","setTimeout","play","minutes","Math","floor","minutesFormat","seconds","secondsFormat","warning","color","marginBottom","letterSpacing","ref","preload","src","style","href","rel","github","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.02494ca2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Session({ state, handleClick }) {\r\n  const { arr, disabled } = state;\r\n  const sessions = arr.map((obj) => {\r\n    const idLabel = obj.name === 'Break' ? 'break-label' : 'session-label';\r\n    const idDecrement =\r\n      obj.name === 'Break' ? 'break-decrement' : 'session-decrement';\r\n    const idIncrement =\r\n      obj.name === 'Break' ? 'break-increment' : 'session-increment';\r\n    const idLength = obj.name === 'Break' ? 'break-length' : 'session-length';\r\n    return (\r\n      <div className=\"singleSession\" key={obj.name}>\r\n        <h1 id={idLabel}>{obj.name} Length</h1>\r\n        <span className=\"counter\">\r\n          <button\r\n            id={idIncrement}\r\n            name={obj.name}\r\n            onClick={handleClick}\r\n            value={1}\r\n            disabled={disabled}\r\n          >\r\n            <i class=\"fas fa-chevron-circle-up\"></i>\r\n          </button>\r\n          <h2 id={idLength}>{obj.counter}</h2>\r\n          <button\r\n            id={idDecrement}\r\n            name={obj.name}\r\n            onClick={handleClick}\r\n            value={-1}\r\n            disabled={disabled}\r\n          >\r\n            <i class=\"fas fa-chevron-circle-up\"></i>\r\n          </button>\r\n        </span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"Session\">{sessions}</div>;\r\n}\r\n\r\nexport default Session;\r\n","import React, { Component } from 'react';\nimport Session from './components/Session';\nimport github from './githubIcon.svg';\n\nclass App extends Component {\n  state = {\n    arr: [\n      { name: 'Session', counter: 25, totalSeconds: 1500, countStart: null },\n      { name: 'Break', counter: 5, totalSeconds: 300, countStart: null },\n    ],\n    defaultIndex: 0,\n    disabled: false,\n  };\n\n  audioRef = React.createRef();\n\n  handleReset = (e) => {\n    const { arr, defaultIndex } = this.state;\n    clearInterval(arr[defaultIndex].countStart);\n    this.setState(\n      {\n        arr: [\n          {\n            name: 'Session',\n            counter: 25,\n            totalSeconds: 1500,\n            countStart: null,\n          },\n          { name: 'Break', counter: 5, totalSeconds: 300, countStart: null },\n        ],\n        defaultIndex: 0,\n        disabled: false,\n      },\n      this.audioRef.current.load()\n    );\n  };\n\n  handleClick = (e) => {\n    const { value, name } = e.target;\n    let newArr = [...this.state.arr];\n    const index = newArr.findIndex((obj) => obj.name === name);\n    const { counter } = newArr[index];\n    const limitCheck =\n      (counter === 1 && parseInt(value) === -1) ||\n      (counter === 60 && parseInt(value) === 1);\n\n    if (!limitCheck) {\n      newArr[index] = {\n        ...newArr[index],\n        counter: counter + parseInt(value),\n        totalSeconds: 60 * (counter + parseInt(value)),\n      };\n    }\n    this.setState({ arr: newArr });\n  };\n\n  handleStart = (e) => {\n    const { arr, defaultIndex } = this.state;\n    const { totalSeconds, countStart } = arr[defaultIndex];\n    let newArr = [...arr];\n    if (totalSeconds > 0 && countStart === null) {\n      newArr[defaultIndex] = {\n        ...newArr[defaultIndex],\n        countStart: setInterval(this.countDown, 1000),\n      };\n      this.setState({\n        arr: newArr,\n        disabled: true,\n      });\n    } else {\n      clearInterval(countStart);\n      newArr[defaultIndex] = {\n        ...newArr[defaultIndex],\n        countStart: null,\n      };\n      this.setState({\n        arr: newArr,\n        disabled: false,\n      });\n    }\n  };\n\n  countDown = () => {\n    const { arr, defaultIndex } = this.state;\n    let newArr = [...arr];\n    const { totalSeconds } = newArr[defaultIndex];\n    newArr[defaultIndex] = {\n      ...newArr[defaultIndex],\n      totalSeconds: totalSeconds - 1,\n    };\n    this.setState({ arr: newArr });\n  };\n\n  componentDidUpdate() {\n    const { arr, defaultIndex } = this.state;\n    const { totalSeconds, countStart } = arr[defaultIndex];\n    let newArr = [...arr];\n    if (totalSeconds === 0 && countStart !== null) {\n      clearInterval(countStart);\n      newArr[defaultIndex] = {\n        ...newArr[defaultIndex],\n        countStart: null,\n      };\n\n      let otherIndex = defaultIndex === 0 ? 1 : 0;\n      let otherTotalSeconds =\n        newArr[otherIndex].totalSeconds > 0\n          ? newArr[otherIndex].totalSeconds\n          : 60 * newArr[otherIndex].counter;\n\n      newArr[otherIndex] = {\n        ...newArr[otherIndex],\n        totalSeconds: otherTotalSeconds,\n      };\n\n      setTimeout(() => {\n        this.setState(\n          {\n            arr: newArr,\n            defaultIndex: otherIndex,\n          },\n          () => {\n            this.handleStart();\n            this.audioRef.current.play();\n          }\n        );\n      }, 1000);\n    }\n  }\n\n  render() {\n    const { arr, defaultIndex } = this.state;\n    const minutes = Math.floor(arr[defaultIndex].totalSeconds / 60);\n    const minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\n    const seconds = arr[defaultIndex].totalSeconds % 60;\n    const secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\n    const warning =\n      minutes === 0\n        ? { color: '#f44336', marginBottom: '10px', letterSpacing: '7px' }\n        : { marginBottom: '10px', letterSpacing: '7px' };\n    return (\n      <div className=\"App\">\n        <audio\n          id=\"beep\"\n          ref={this.audioRef}\n          preload=\"auto\"\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        ></audio>\n        <h1>Pomodoro Clock</h1>\n        <div className=\"display\">\n          <Session state={this.state} handleClick={this.handleClick} />\n          <div className=\"currentSession\">\n            <h1 id=\"timer-label\">{arr[defaultIndex].name}</h1>\n            <h2 id=\"time-left\" style={warning}>\n              {minutesFormat}:{secondsFormat}\n            </h2>\n            <button id=\"start_stop\" onClick={this.handleStart}>\n              <i class=\"fas fa-play-circle\"></i> Start\n            </button>\n            <button id=\"reset\" onClick={this.handleReset}>\n              <i class=\"fas fa-undo\"></i> Reset\n            </button>\n          </div>\n        </div>\n        <div className=\"credits\">\n          <p>Designed and Coded By</p>\n          <a\n            href=\"https://github.com/pomubry\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={github} alt=\"github icon\" />\n            Bryan Taduran\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/githubIcon.0a3a0978.svg\";"],"sourceRoot":""}